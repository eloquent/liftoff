{"service_name":"travis-ci","service_job_id":"10222256","git":{"branch":"(detached from 195ad75)","head":{"id":"195ad752594f9835140a50c35c51c504cff15811","author_name":"Erin Millard","author_email":"ezzatron@gmail.com","committer_name":"Erin Millard","committer_email":"ezzatron@gmail.com","message":"Repository maintenance."},"remotes":[{"name":"origin","url":"git:\/\/github.com\/eloquent\/liftoff.git"}]},"run_at":"2013-08-15 00:03:25 +0000","source_files":[{"name":"Eloquent\/Liftoff\/Console\/LiftoffApplication.php","source":"<?php\n\n\/*\n * This file is part of the Liftoff package.\n *\n * Copyright \u00a9 2013 Erin Millard\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n *\/\n\nnamespace Eloquent\\Liftoff\\Console;\n\nuse Eloquent\\Liftoff\\Launcher;\nuse Eloquent\\Liftoff\\LauncherInterface;\nuse Icecave\\Isolator\\Isolator;\nuse RuntimeException;\n\n\/**\n * Handles the Liftoff command line interface.\n *\/\nclass LiftoffApplication\n{\n    const VERSION = '0.1.0';\n\n    \/**\n     * Create a new Application instance.\n     *\n     * @param LauncherInterface|null $launcher The launcher to use.\n     * @param Isolator|null          $isolator The isolator to use.\n     *\/\n    public function __construct(\n        LauncherInterface $launcher = null,\n        Isolator $isolator = null\n    ) {\n        if (null === $launcher) {\n            $launcher = new Launcher;\n        }\n\n        $this->launcher = $launcher;\n        $this->isolator = Isolator::get($isolator);\n    }\n\n    \/**\n     * Get the launcher used by this application.\n     *\n     * @return LauncherInterface The launcher.\n     *\/\n    public function launcher()\n    {\n        return $this->launcher;\n    }\n\n    \/**\n     * Runs the Liftoff command line application.\n     *\n     * @param array<string,mixed>|null $variables The server variables to use.\n     *     Defaults to $_SERVER.\n     *\/\n    public function execute(array $variables = null)\n    {\n        if (null === $variables) {\n            $variables = $_SERVER;\n        }\n\n        $arguments = $this->arguments($variables);\n        if (count($arguments) < 1) {\n            throw new RuntimeException('No arguments provided.');\n        }\n\n        switch ($arguments[0]) {\n            case '-h':\n            case '--help':\n                $this->executeUsage();\n\n                return;\n\n            case '-v':\n            case '--version':\n                $this->executeVersion();\n\n                return;\n        }\n\n        $this->executeLaunch($arguments);\n    }\n\n    \/**\n     * @param array<string> $arguments\n     *\/\n    protected function executeLaunch(array $arguments)\n    {\n        $this->launcher()->launch($arguments[0], array_slice($arguments, 1));\n    }\n\n    protected function executeUsage()\n    {\n        $this->isolator->echo('Usage: liftoff <target> [argument...]' . PHP_EOL);\n    }\n\n    protected function executeVersion()\n    {\n        $this->isolator->echo('Liftoff ' . static::VERSION . PHP_EOL);\n    }\n\n    \/**\n     * @param array<string,mixed> $variables\n     *\n     * @return array<string>\n     *\/\n    protected function arguments(array $variables)\n    {\n        if (\n            !array_key_exists('argv', $variables) ||\n            !is_array($variables['argv'])\n        ) {\n            throw new RuntimeException('Unable to determine arguments.');\n        }\n\n        $arguments = $variables['argv'];\n        array_shift($arguments);\n\n        return $arguments;\n    }\n\n    private $launcher;\n    private $isolator;\n}","coverage":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,10,1,1,null,10,10,10,null,null,null,null,null,null,null,null,4,null,null,null,null,null,null,null,null,null,null,8,1,1,null,8,7,1,null,null,6,6,6,2,null,2,null,4,4,2,null,2,2,null,2,2,null,null,null,null,null,null,2,2,null,null,null,2,2,null,null,null,2,2,null,null,null,null,null,null,null,null,null,8,7,8,1,null,null,7,7,null,7,null,null,null,null,null]},{"name":"Eloquent\/Liftoff\/Exception\/LaunchException.php","source":"<?php\n\n\/*\n * This file is part of the Liftoff package.\n *\n * Copyright \u00a9 2013 Erin Millard\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n *\/\n\nnamespace Eloquent\\Liftoff\\Exception;\n\nuse Exception;\nuse RuntimeException;\n\n\/**\n * Launch command failed, or is unavailable.\n *\/\nfinal class LaunchException extends RuntimeException\n{\n    \/**\n     * Create a new LaunchException instance.\n     *\n     * @param string         $target   The target that Liftoff attempted to launch.\n     * @param Exception|null $previous The previous exception, if available.\n     *\/\n    public function __construct($target, Exception $previous = null)\n    {\n        $this->target = $target;\n\n        parent::__construct(\n            sprintf('Unable to launch %s.', var_export($target, true)),\n            0,\n            $previous\n        );\n    }\n\n    \/**\n     * Get the target that Liftoff attempted to launch.\n     *\n     * @return string The target that Liftoff attempted to launch.\n     *\/\n    public function target()\n    {\n        return $this->target;\n    }\n\n    private $target;\n}","coverage":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,1,null,1,1,1,null,1,1,null,null,null,null,null,null,null,null,1,null,null,null,null]},{"name":"Eloquent\/Liftoff\/Launcher.php","source":"<?php\n\n\/*\n * This file is part of the Liftoff package.\n *\n * Copyright \u00a9 2013 Erin Millard\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n *\/\n\nnamespace Eloquent\\Liftoff;\n\nuse Icecave\\Isolator\\Isolator;\n\n\/**\n * Launches files in their default GUI application.\n *\/\nclass Launcher implements LauncherInterface\n{\n    \/**\n     * Create a new Launcher instance.\n     *\n     * @param Isolator|null $isolator\n     *\/\n    public function __construct(Isolator $isolator = null)\n    {\n        $this->isolator = Isolator::get($isolator);\n    }\n\n    \/**\n     * Launch a file or URI in its default GUI application.\n     *\n     * @param string             $target    The path or URI to launch.\n     * @param array<string>|null $arguments An array of arguments to pass to the\n     *     associated application.\n     *\n     * @throws Exception\\LaunchException If the launch command fails, or is\n     *     unavailable.\n     *\/\n    public function launch($target, array $arguments = null)\n    {\n        if (null === $arguments) {\n            $arguments = array();\n        }\n\n        $os = $this->isolator->php_uname('s');\n\n        if ('win' === strtolower(substr($os, 0, 3))) {\n            $this->launchWindows($target, $arguments);\n        } elseif ('Darwin' === $os) {\n            $this->launchOsx($target, $arguments);\n        } else {\n            $this->launchUnix($target, $arguments);\n        }\n    }\n\n    \/**\n     * @param string        $target\n     * @param array<string> $arguments\n     *\n     * @throws Exception\\LaunchException\n     *\/\n    protected function launchOsx($target, array $arguments)\n    {\n        if (count($arguments) > 0) {\n            array_unshift($arguments, '--args');\n        }\n        array_unshift($arguments, $target);\n\n        $this->launchCommand('open', $arguments);\n    }\n\n    \/**\n     * @param string        $target\n     * @param array<string> $arguments\n     *\n     * @throws Exception\\LaunchException\n     *\/\n    protected function launchUnix($target, array $arguments)\n    {\n        array_unshift($arguments, $target);\n\n        $this->launchCommand('xdg-open', $arguments);\n    }\n\n    \/**\n     * @param string        $target\n     * @param array<string> $arguments\n     *\n     * @throws Exception\\LaunchException\n     *\/\n    protected function launchWindows($target, array $arguments)\n    {\n        array_unshift($arguments, \"liftoff\", $target);\n\n        $this->launchCommand('start', $arguments);\n    }\n\n    \/**\n     * @param string        $command\n     * @param array<string> $arguments\n     *\n     * @throws Exception\\LaunchException\n     *\/\n    protected function launchCommand($command, array $arguments)\n    {\n        $command = implode(\n            ' ',\n            array_merge(\n                array($command),\n                array_map('escapeshellarg', $arguments)\n            )\n        );\n\n        $handle = $this->isolator->proc_open(\n            $command,\n            array(\n                array('pipe', 'r'),\n                array('pipe', 'w'),\n                array('pipe', 'w'),\n            ),\n            $pipes\n        );\n        if (false === $handle) {\n            throw new Exception\\LaunchException($arguments[0]);\n        }\n\n        foreach ($pipes as $pipe) {\n            $this->isolator->fclose($pipe);\n        }\n        $this->isolator->proc_close($handle);\n    }\n\n    private $isolator;\n}","coverage":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,7,7,null,null,null,null,null,null,null,null,null,null,null,null,null,7,4,4,null,7,null,7,2,7,2,2,3,null,6,null,null,null,null,null,null,null,null,null,2,1,1,2,null,2,2,null,null,null,null,null,null,null,null,null,3,null,3,2,null,null,null,null,null,null,null,null,null,2,null,2,2,null,null,null,null,null,null,null,null,null,7,7,7,7,7,7,7,null,7,7,null,7,7,7,7,null,7,7,1,null,null,6,6,6,6,6,null,null,null]},{"name":"Eloquent\/Liftoff\/LauncherInterface.php","source":"<?php\n\n\/*\n * This file is part of the Liftoff package.\n *\n * Copyright \u00a9 2013 Erin Millard\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n *\/\n\nnamespace Eloquent\\Liftoff;\n\n\/**\n * The interface implemented by launchers.\n *\/\ninterface LauncherInterface\n{\n    \/**\n     * Launch a file or URI in its default GUI application.\n     *\n     * @param string             $target    The path or URI to launch.\n     * @param array<string>|null $arguments An array of arguments to pass to the\n     *     associated application.\n     *\n     * @throws Exception\\LaunchException If the launch command fails, or is\n     *     unavailable.\n     *\/\n    public function launch($target, array $arguments = null);\n}","coverage":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null]}]}